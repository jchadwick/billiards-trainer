# GitHub Actions workflow for testing the billiards trainer backend
name: Backend Tests

on:
  push:
    branches: [ main, develop ]
    paths: [ 'backend/**', '.github/workflows/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'backend/**', '.github/workflows/**' ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort mypy

    - name: Run black
      run: |
        cd backend
        black --check --diff .

    - name: Run isort
      run: |
        cd backend
        isort --check-only --diff .

    - name: Run mypy
      run: |
        cd backend
        mypy . || true  # Don't fail on type errors for now

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-xdist

    - name: Create test directories
      run: |
        mkdir -p backend/tests/logs
        mkdir -p backend/tests/data
        mkdir -p backend/tests/coverage

    - name: Run unit tests
      run: |
        cd backend
        python -m pytest tests/unit/ \
          -m unit \
          --cov=backend \
          --cov-report=xml:coverage.xml \
          --cov-report=term-missing \
          --junit-xml=junit.xml \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unit-tests
        name: unit-tests
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: backend/junit.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov

    - name: Run integration tests
      run: |
        cd backend
        python -m pytest tests/integration/ \
          -m integration \
          --cov=backend \
          --cov-report=xml:coverage-integration.xml \
          --junit-xml=junit-integration.xml \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage-integration.xml
        flags: integration-tests
        name: integration-tests
        fail_ci_if_error: false

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio psutil

    - name: Run performance tests
      run: |
        cd backend
        python -m pytest tests/performance/ \
          -m performance \
          --junit-xml=junit-performance.xml \
          -v \
          --tb=short

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: backend/junit-performance.xml

  system-tests:
    name: System Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio requests

    - name: Run system tests
      run: |
        cd backend
        python -m pytest tests/system/ \
          -m "system and not hardware" \
          --junit-xml=junit-system.xml \
          -v \
          --tb=short

  test-matrix:
    name: Test Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run quick tests
      run: |
        cd backend
        python -m pytest tests/unit/ tests/integration/ \
          -m "not slow and not hardware" \
          --tb=short \
          -q

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-html

    - name: Run all tests with coverage
      run: |
        cd backend
        python -m pytest tests/ \
          -m "not slow and not hardware" \
          --cov=backend \
          --cov-report=html:coverage-html \
          --cov-report=xml:coverage.xml \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --html=test-report.html \
          --self-contained-html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          backend/coverage-html/
          backend/test-report.html
          backend/coverage.xml

    - name: Upload to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: all-tests
        name: all-tests

  docker-test:
    name: Docker Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build test Docker image
      run: |
        cd backend
        docker build -t billiards-test -f Dockerfile.test .

    - name: Run tests in Docker
      run: |
        docker run --rm billiards-test

  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-benchmark

    - name: Run benchmarks
      run: |
        cd backend
        python -m pytest tests/performance/ \
          -m performance \
          --benchmark-only \
          --benchmark-json=benchmark.json

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: backend/benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

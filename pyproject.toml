[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "billiards-trainer"
version = "0.1.0"
description = "AI-powered billiards training system with computer vision and projector overlay"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "J Chadwick", email = "jchadwick@example.com"}
]
maintainers = [
    {name = "J Chadwick", email = "jchadwick@example.com"}
]
keywords = ["billiards", "computer-vision", "training", "opencv", "projector"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Multimedia :: Video :: Capture",
]
requires-python = ">=3.9"
dependencies = [
    "opencv-python>=4.8.0",
    "numpy>=1.24.0",
    "scikit-image>=0.21.0",
    "numba>=0.57.0",
    "Pillow>=10.0.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "websockets>=11.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "pydantic>=2.0.0",
    "PyYAML>=6.0",
    "python-dotenv>=1.0.0",
    "jsonschema>=4.17.0",
    "scipy>=1.10.0",
    "PyOpenGL>=3.1.0",
    "pygame>=2.5.0",
    "moderngl>=5.8.0",
    "watchdog>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.0.285",
    "pre-commit>=3.3.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
performance = [
    "line-profiler>=4.0.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
]

[project.urls]
Homepage = "https://github.com/jchadwick/billiards-trainer"
Documentation = "https://github.com/jchadwick/billiards-trainer/docs"
Repository = "https://github.com/jchadwick/billiards-trainer.git"
"Bug Tracker" = "https://github.com/jchadwick/billiards-trainer/issues"

[project.scripts]
billiards-trainer = "backend.main:main"
bt-api = "backend.api.main:main"
bt-vision = "backend.vision.main:main"
bt-projector = "backend.projector.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["backend*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"backend" = ["*.json", "*.yaml", "*.yml"]

# ===== Code Quality Tools =====

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["backend"]
known_third_party = ["cv2", "numpy", "fastapi", "pydantic", "pygame", "OpenGL"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "ARG002", # unused-method-args
    "ARG003", # unused-class-method-args
    "ARG004", # unused-static-method-args
    "ARG005", # unused-lambda-args
    "D",   # pydocstyle
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",   # flake8-quotes
    "UP",  # pyupgrade
    "PT",  # flake8-pytest-style
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D205", # 1 blank line required between summary and description
    "D213", # Multi-line docstring summary should start at the second line
    "D417", # Missing argument descriptions in the docstring
    "E501", # line too long, handled by black
    "E402", # module import not at top of file
    "E722", # bare except
    "E741", # ambiguous variable name
    "B008", # do not perform function calls in argument defaults
    "B007", # unused loop control variable
    "B017", # assert raises exception
    "B904", # raise without from inside except
    "F401", # unused import
    "F403", # undefined local with import star
    "F405", # undefined local with import star usage
    "F811", # redefined while unused
    "I001", # unsorted imports (handled by isort)
    "ARG001", # unused function argument
    "ARG002", # unused method argument
    "ARG005", # unused lambda argument
    "PT009", # pytest unittest assertion
    "PT011", # pytest raises too broad
    "PT012", # pytest raises with multiple statements
    "PT017", # pytest assert in except
    "SIM102", # collapsible if
    "SIM105", # suppressible exception
    "SIM108", # if else block instead of if exp
    "SIM117", # multiple with statements
    "TID252", # Prefer absolute imports over relative imports from parent modules
    "UP035", # Deprecated typing imports (Dict, List, etc.) - grandfathered in existing code
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 12

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
exclude = [
    "^backend/tests/",
    "^backend/.*/tests/",
    "^backend/.*_test\\.py$",
    "^backend/test_.*\\.py$",
    "^backend/.*demo.*\\.py$",
    "^backend/.*/examples/",
]

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "pygame.*",
    "OpenGL.*",
    "moderngl.*",
    "numba.*",
    "scipy.*",
    "sklearn.*",
]
ignore_missing_imports = true

# ===== Testing Configuration =====

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
    "--cov=backend",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "vision: marks tests as computer vision tests",
    "api: marks tests as API tests",
    "projector: marks tests as projector tests",
    "hardware: marks tests that require hardware (camera/projector)",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["/tests", "/.venv", "/venv"]
skips = ["B101", "B601", "B104", "B110", "B112", "B105", "B106", "B108", "B311", "B404", "B603"]
